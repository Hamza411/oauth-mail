{"ast":null,"code":"import axios from \"axios\";\nimport { SIGN_IN, SIGN_OUT, SEND_MESSAGE, FETCH_MESSAGES // FETCH_MESSAGE,\n} from './types';\nimport { decode as base64_decode, encode as base64_encode } from 'base-64';\nexport const signIn = (userId, email) => {\n  return {\n    type: SIGN_IN,\n    payload: {\n      userId: userId,\n      email: email\n    }\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const fetchMessages = messages => async (dispatch, getState) => {\n  // const { email, userId } = getState().auth;\n  // console.log(getState().auth)\n  // console.log(\"email\", email)\n  // console.log(\"userId\", userId)\n  const token = localStorage.getItem(\"token\");\n  const email = localStorage.getItem(\"email\");\n  const url = `https://gmail.googleapis.com/gmail/v1/users/${email}/threads`; // console.log(\"token*****************************\", token)\n\n  const response = await axios.get(url, {\n    params: {\n      maxResults: 10\n    },\n    headers: {\n      \"Authorization\": \"Bearer \" + token\n    }\n  });\n  dispatch({\n    type: FETCH_MESSAGES,\n    payload: response.data\n  });\n};\nexport const sendmessage = formValues => async (dispatch, getState) => {\n  const token = localStorage.getItem(\"token\");\n  const email = localStorage.getItem(\"email\");\n  const url = `https://gmail.googleapis.com/gmail/v1/users/${email}/messages/send`; // const response = await mails.post(\"/messages\", { ...formValues, userId });\n  // const encodedString = Buffer.from(formValues).toString('base64');\n\n  let encoded = base64_encode(formValues);\n  const response = await axios.post(url, encoded, {\n    headers: {\n      'Content-Type': 'application/json',\n      \"Authorization\": \"Bearer \" + token\n    },\n    body: JSON.stringify({\n      raw: encoded\n    })\n  });\n  dispatch({\n    type: SEND_MESSAGE,\n    payload: response.data\n  });\n}; // export const fetchMessage = (id) => async dispatch => {\n//     const response = await mails.get(`/messages/${id}`);\n//     dispatch({ type: FETCH_MESSAGE, payload: response.data })\n// }","map":{"version":3,"sources":["/home/contegris/Documents/React-Learning/Gmail/src/actions/index.js"],"names":["axios","SIGN_IN","SIGN_OUT","SEND_MESSAGE","FETCH_MESSAGES","decode","base64_decode","encode","base64_encode","signIn","userId","email","type","payload","signOut","fetchMessages","messages","dispatch","getState","token","localStorage","getItem","url","response","get","params","maxResults","headers","data","sendmessage","formValues","encoded","post","body","JSON","stringify","raw"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,OADJ,EAEIC,QAFJ,EAGIC,YAHJ,EAIIC,cAJJ,CAKI;AALJ,OAMO,SANP;AAOA,SAASC,MAAM,IAAIC,aAAnB,EAAkCC,MAAM,IAAIC,aAA5C,QAAiE,SAAjE;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACrC,SAAO;AACHC,IAAAA,IAAI,EAAEX,OADH;AAEHY,IAAAA,OAAO,EAAE;AACLH,MAAAA,MAAM,EAAEA,MADH;AAELC,MAAAA,KAAK,EAAEA;AAFF;AAFN,GAAP;AAOH,CARM;AAUP,OAAO,MAAMG,OAAO,GAAG,MAAM;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAEV;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMa,aAAa,GAAIC,QAAD,IAAc,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAErE;AACA;AACA;AACA;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMV,KAAK,GAAGS,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMC,GAAG,GAAI,+CAA8CX,KAAM,UAAjE,CARqE,CAUrE;;AAEA,QAAMY,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAN,CAAUF,GAAV,EAAe;AAClCG,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,EAAE;AADR,KAD0B;AAIlCC,IAAAA,OAAO,EAAE;AACL,uBAAiB,YAAYR;AADxB;AAJyB,GAAf,CAAvB;AASAF,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAER,cAAR;AAAwBS,IAAAA,OAAO,EAAEU,QAAQ,CAACK;AAA1C,GAAD,CAAR;AACH,CAtBM;AAwBP,OAAO,MAAMC,WAAW,GAAIC,UAAD,IAAgB,OAAOb,QAAP,EAAiBC,QAAjB,KAA8B;AACrE,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMV,KAAK,GAAGS,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMC,GAAG,GAAI,+CAA8CX,KAAM,gBAAjE,CAHqE,CAIrE;AACA;;AACA,MAAIoB,OAAO,GAAGvB,aAAa,CAACsB,UAAD,CAA3B;AACA,QAAMP,QAAQ,GAAG,MAAMvB,KAAK,CAACgC,IAAN,CAAWV,GAAX,EAAgBS,OAAhB,EAAyB;AAC5CJ,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAiB,YAAYR;AAFxB,KADmC;AAK5Cc,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,GAAG,EAAEL;AADY,KAAf;AALsC,GAAzB,CAAvB;AAUAd,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAET,YAAR;AAAsBU,IAAAA,OAAO,EAAEU,QAAQ,CAACK;AAAxC,GAAD,CAAR;AACH,CAlBM,C,CAoBP;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\nimport {\n    SIGN_IN,\n    SIGN_OUT,\n    SEND_MESSAGE,\n    FETCH_MESSAGES,\n    // FETCH_MESSAGE,\n} from './types';\nimport { decode as base64_decode, encode as base64_encode } from 'base-64';\n\nexport const signIn = (userId, email) => {\n    return {\n        type: SIGN_IN,\n        payload: {\n            userId: userId,\n            email: email\n        }\n    }\n}\n\nexport const signOut = () => {\n    return {\n        type: SIGN_OUT\n    }\n}\n\nexport const fetchMessages = (messages) => async (dispatch, getState) => {\n\n    // const { email, userId } = getState().auth;\n    // console.log(getState().auth)\n    // console.log(\"email\", email)\n    // console.log(\"userId\", userId)\n    const token = localStorage.getItem(\"token\")\n    const email = localStorage.getItem(\"email\")\n    const url = `https://gmail.googleapis.com/gmail/v1/users/${email}/threads`\n\n    // console.log(\"token*****************************\", token)\n\n    const response = await axios.get(url, {\n        params: {\n            maxResults: 10\n        },\n        headers: {\n            \"Authorization\": \"Bearer \" + token\n        }\n    });\n\n    dispatch({ type: FETCH_MESSAGES, payload: response.data })\n}\n\nexport const sendmessage = (formValues) => async (dispatch, getState) => {\n    const token = localStorage.getItem(\"token\")\n    const email = localStorage.getItem(\"email\")\n    const url = `https://gmail.googleapis.com/gmail/v1/users/${email}/messages/send`\n    // const response = await mails.post(\"/messages\", { ...formValues, userId });\n    // const encodedString = Buffer.from(formValues).toString('base64');\n    let encoded = base64_encode(formValues);\n    const response = await axios.post(url, encoded, {\n        headers: {\n            'Content-Type': 'application/json',\n            \"Authorization\": \"Bearer \" + token\n        },\n        body: JSON.stringify({\n            raw: encoded\n        })\n    })\n\n    dispatch({ type: SEND_MESSAGE, payload: response.data })\n};\n\n// export const fetchMessage = (id) => async dispatch => {\n//     const response = await mails.get(`/messages/${id}`);\n//     dispatch({ type: FETCH_MESSAGE, payload: response.data })\n// }\n"]},"metadata":{},"sourceType":"module"}